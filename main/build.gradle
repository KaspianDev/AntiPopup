plugins {
    id "java"
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

repositories {
    maven {
        name = "devmart-other"
        url = "https://nexuslite.gcnt.net/repos/other/"
    }
    maven {
        name = "codemc"
        url = "https://repo.codemc.io/repository/maven-releases/"
    }
}

dependencies {
    implementation project(path: ":shared")
    implementation project(path: ":v1.19.2", configuration: "reobf")
    implementation project(path: ":v1.19.3", configuration: "reobf")
    implementation project(path: ":v1.19.4", configuration: "reobf")
    implementation project(path: ":v1.20", configuration: "reobf")
    implementation project(path: ":v1.20.2", configuration: "reobf")
    implementation project(path: ":v1.20.3", configuration: "reobf")

    compileOnly "org.spigotmc:spigot-api:1.19.4-R0.1-SNAPSHOT"
    compileOnly "dev.dejvokep:boosted-yaml-spigot:1.3"
    compileOnly "com.viaversion:viaversion:4.6.1"
    compileOnly "org.apache.logging.log4j:log4j-core:2.19.0"

    implementation "org.bstats:bstats-bukkit:3.0.0"
    implementation "com.github.retrooper.packetevents:spigot:2.2.1"
    implementation "com.tcoded:FoliaLib:0.2.3"
}

tasks {
    build {
        dependsOn(shadowJar)
    }
    shadowJar {
        minimize()
        relocate("io.github.retrooper.packetevents", "com.github.kaspiandev.antipopup.libs.packetevents")
        relocate("com.github.retrooper.packetevents", "com.github.kaspiandev.antipopup.libs.packetevents")
        relocate("net.kyori", "com.github.kaspiandev.antipopup.libs.kyori")
        relocate("org.bstats", "com.github.kaspiandev.antipopup.libs.bstats")
        relocate("com.tcoded.folialib", "com.github.kaspiandev.antipopup.libs.folialib")
        dependencies {
            exclude(dependency("com.google.code.gson:gson:2.8.0"))
        }
    }
}

def targetJavaVersion = 17

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset "UTF-8"
    filesMatching("plugin.yml") {
        expand props
    }
}
